// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/thinhle/Projects/tinyurl/backend/api-gateway/common/counter/counter.go

// Package mock_counter is a generated GoMock package.
package mock_counter

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockCounter is a mock of Counter interface.
type MockCounter struct {
        ctrl     *gomock.Controller
        recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
        mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
        mock := &MockCounter{ctrl: ctrl}
        mock.recorder = &MockCounterMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
        return m.recorder
}

// GetOrderNumber mocks base method.
func (m *MockCounter) GetOrderNumber() (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrderNumber")
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrderNumber indicates an expected call of GetOrderNumber.
func (mr *MockCounterMockRecorder) GetOrderNumber() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderNumber", reflect.TypeOf((*MockCounter)(nil).GetOrderNumber))
}

// MustInit mocks base method.
func (m *MockCounter) MustInit() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "MustInit")
        ret0, _ := ret[0].(error)
        return ret0
}

// MustInit indicates an expected call of MustInit.
func (mr *MockCounterMockRecorder) MustInit() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustInit", reflect.TypeOf((*MockCounter)(nil).MustInit))
}